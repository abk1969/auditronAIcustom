#!/usr/bin/env python3
import os
import sys
import subprocess
import platform
import getpass
from pathlib import Path
import secrets
import string
from typing import Dict, Optional

def check_python_version():
    """V√©rifie que la version de Python est compatible."""
    if not (3, 9, 0) <= sys.version_info < (3, 10, 0):
        print("‚ùå Python 3.9.x est requis")
        print(f"Version actuelle: {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
        sys.exit(1)
    print("‚úÖ Version Python compatible d√©tect√©e")

def install_poetry():
    """Installe Poetry s'il n'est pas d√©j√† install√©."""
    try:
        subprocess.run(["poetry", "--version"], check=True, capture_output=True)
        print("‚úÖ Poetry est d√©j√† install√©")
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("üì¶ Installation de Poetry...")
        subprocess.run(
            ["curl", "-sSL", "https://install.python-poetry.org", "|", "python3", "-"],
            shell=True,
            check=True
        )
        print("‚úÖ Poetry install√© avec succ√®s")

def get_api_key(service: str) -> str:
    """Demande de mani√®re s√©curis√©e une cl√© API √† l'utilisateur."""
    while True:
        key = getpass.getpass(f"Entrez votre cl√© API {service} (laissez vide pour passer): ")
        if not key:
            return ""
        if len(key) > 20:  # V√©rification basique de la longueur
            return key
        print(f"‚ùå La cl√© {service} semble invalide. Veuillez r√©essayer.")

def generate_secret_key(length: int = 32) -> str:
    """G√©n√®re une cl√© secr√®te al√©atoire."""
    alphabet = string.ascii_letters + string.digits + string.punctuation
    return ''.join(secrets.choice(alphabet) for _ in range(length))

def create_env_file(project_root: Path, api_keys: Dict[str, str]):
    """Cr√©e le fichier .env avec les variables d'environnement."""
    env_path = project_root / ".env"
    secret_key = generate_secret_key()
    
    env_content = f"""# Configuration AuditronAI
AI_SERVICE={"google" if api_keys["google"] else "openai" if api_keys["openai"] else "google"}
OPENAI_API_KEY={api_keys["openai"]}
GOOGLE_API_KEY={api_keys["google"]}
SECRET_KEY={secret_key}

# Configuration base de donn√©es
DB_HOST=localhost
DB_PORT=5432
DB_NAME=auth_db
DB_USER=postgres
DB_PASSWORD=postgres

# Configuration interface
STREAMLIT_THEME_BASE=dark
STREAMLIT_SERVER_PORT=8501
STREAMLIT_SERVER_ADDRESS=localhost
UI_DEFAULT_THEME=dark

# Configuration s√©curit√©
STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION=true
STREAMLIT_EXTERNAL_ACCESS=false
DEBUG=false
"""
    
    env_path.write_text(env_content)
    print(f"‚úÖ Fichier .env cr√©√©: {env_path}")

def create_streamlit_secrets(project_root: Path, api_keys: Dict[str, str]):
    """Cr√©e le fichier de secrets Streamlit."""
    secrets_dir = project_root / ".streamlit"
    secrets_dir.mkdir(exist_ok=True)
    secrets_path = secrets_dir / "secrets.toml"
    
    secrets_content = f"""
[api_keys]
openai = "{api_keys['openai']}"
google = "{api_keys['google']}"

[database]
host = "localhost"
port = 5432
db = "auth_db"
user = "postgres"
password = "postgres"
"""
    
    secrets_path.write_text(secrets_content)
    print(f"‚úÖ Fichier secrets.toml cr√©√©: {secrets_path}")

def setup_project_structure(project_root: Path):
    """Cr√©e la structure de dossiers n√©cessaire."""
    dirs = ["logs", "data"]
    for dir_name in dirs:
        dir_path = project_root / dir_name
        dir_path.mkdir(exist_ok=True)
    print("‚úÖ Structure de dossiers cr√©√©e")

def install_dependencies(project_root: Path):
    """Installe les d√©pendances du projet avec Poetry."""
    print("üì¶ Installation des d√©pendances...")
    subprocess.run(["poetry", "install"], cwd=project_root, check=True)
    print("‚úÖ D√©pendances install√©es")

def install_postgres():
    """Installe et configure PostgreSQL."""
    print("üêò Installation de PostgreSQL...")
    # Import et ex√©cution du script d'installation PostgreSQL
    from install_postgres import main as install_postgres_main
    install_postgres_main()
    print("‚úÖ PostgreSQL install√© et configur√©")

def main():
    try:
        project_root = Path(__file__).parent.parent.parent
        
        print("\n=== Installation d'AuditronAI ===\n")
        
        # V√©rification des pr√©requis
        check_python_version()
        install_poetry()
        
        # Installation de PostgreSQL
        install_postgres()
        
        # Collecte des cl√©s API
        print("\n=== Configuration des API ===\n")
        api_keys = {
            "openai": get_api_key("OpenAI"),
            "google": get_api_key("Google AI")
        }
        
        if not any(api_keys.values()):
            print("‚ö†Ô∏è Aucune cl√© API fournie. L'application fonctionnera en mode limit√©.")
        
        # Cr√©ation de la structure du projet
        setup_project_structure(project_root)
        
        # Configuration des secrets
        create_env_file(project_root, api_keys)
        create_streamlit_secrets(project_root, api_keys)
        
        # Installation des d√©pendances
        install_dependencies(project_root)
        
        print("\n=== Installation termin√©e avec succ√®s! ===\n")
        print("Pour lancer l'application:")
        print("1. Activez l'environnement Poetry:")
        print("   poetry shell")
        print("2. Lancez l'application:")
        print("   poetry run run-app")
        print("\nL'application sera accessible √† l'adresse: http://localhost:8501")
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors de l'installation: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
